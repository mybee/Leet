package 数据库

// mongoDB
//  应用场景:
//     高并发读写需求
//     高效率存储
//     数据库高可扩展, 高可用性

//  社交, 游戏, 物流, 物联网, 视频直播

//  数据量大
//  写入操作比较频繁
//  价值比较低的数据, 对事物要求不高(钱就不能用mongodb)


//  大量地理位置查询吗, 文本查询
/// 应用需要2000-3000的qps

//  数据库  集合(表)  文档(行)

//   创建数据库:
//		use 数据库名
//	 查看数据库:
//		show dbs
//	 use: 存放到内存中, 没有持久化到磁盘
//

//   admin: 存放用户和权限
//   local: 不会被集群复制
//   config: 保存分片

// 集合:
//  显示创建:
//  隐士创建:

// 文档:
//  插入文档:
//		db.<coll>.insert() |  insertOne() insertMany()
//      如果没有指定_id, 则自动添加
//  查询文档:
//      db.<coll>.find({_id:1}).count()
//      db.<coll>.findOne({_id: {$gt:400, $lt:500}})
//      find().skip(200).limit(20)


//  修改文档:
//      修改操作符 $unset 删除
//    	db.<coll>.update({},
//      {
//        $set: {
//         }
//      },{multi: true}
//    	)  默认只改一个
//
//       updateMany


//  删除文档:
//      db.<coll>.remove({},true)
//      true 只删除一个

//  文档之间的关系:
//    一对一
//    一对多
//    多对多


//  排序:
//    find({}, {name: 1, emp: 0}).sort({sal: 1, name: -1})
//    limit() skip() sort() 三个调用顺序任意
//    可以指定投影


// 主节点选举原则:
//   1. 主节点故障
//   2. 主节点网络不可达
//   3. 人工干预

// 故障测试:
//   副本节点挂了, 主节点不受影响
//   主节点挂了, 重新开始投票, 副本节点升级为主节点



//  分片集群
//    分片 路由 调度的配置

//
//  分片策略:
//     hash策略:
//
//     数值的范围策略:
//