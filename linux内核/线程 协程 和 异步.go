package linux内核

进程:
	系统资源调度 分配和管理的最小单位

单线程与多线程的出现主要是由于 I/O (磁盘I/O与网络I/O)的高延时, 利用CPU在等待期间的处理能力

线程:
	cpu执行的最小单位
	线程是OS底层的API, 在创建线程与上下文切换过程中, 会消耗较多的时间,
	因此仍有进一步提升 CPU 效率的空间

协程:
	协程则是编程语言级别的用户态, 避免了用户态与内核态切换过程中的时间损耗

异步:
	Node.js 虽然是单线程, 但却是异步模型, 所以可以应对高并发 Node.js 异步模型同样导致了回调地狱问题,
    这就需要编程者通过优化自己代码来解决


线程的五种状态:

初始化
可运行
运行中 (只有这个使用cpu资源)
阻塞
销毁

线程的 创建 销毁(这个可用线程池) 和 切换(无法避免, 可用协程)

协程:
用协程去调度线程

1. 优胜劣汰
开多个协程去执行一个任务, 都往channel中写数据, 只要最快的那个
优点: 可以最快
缺点: 冗余资源


