package 数据结构与算法下

BST:
	二叉搜索树
	时间复杂度: Ologn 最坏情况: On

BST的优化树:
	AVL树:
		条件太苛刻

	红黑树:
		条件:
			root 是黑节点
			叶子节点 是  黑节点
			root子  是 黑节点
			新插入的是红节点
		时间复杂度: Ologn



//红黑树

面试官问红黑树怎么旋转调整的，一般能问到这么细的就看真本事了，要我我选择放弃，
但是问我红黑树是什么，有什么意义还是可以回答的：排序二叉树有不平衡的问题，
可能左子树很长但是右子树很短，造成查询时性能不佳（logn退化成n），
完全平衡的二叉树能保证层数平均，从而查询效率高，但是维护又很麻烦，
每次插入和删除有很大的可能要大幅调整树结构。
红黑树就是介于完全不平衡和完全平衡之间的一种二叉树，
通过每个节点有红黑两种颜色、从节点到任意叶子节点会经过相同数量的黑色节点等一系列规则，
实现了【树的层数最大也只会有两倍的差距】，这样既能提高插入和删除的效率，
又能让树相对平衡从而有还不错的查询效率。从整体上讲，红黑树就是一种中庸之道的二叉树

	基于2-3查找树

	红链接: 将两个2-节点连接起来构成一个3-节点
	黑连接: 2-3树中的普通连接

	红黑树基于二叉查找树:
		红链接均为左连接
		没有任何一个节点同时和两个红链接相连
		该树是黑色完美平衡的, 即任意空连接到根节点的路径上黑连接数量相同

	红黑树的平衡化:
		左旋
		右旋

	颜色反转:


